//ECEProject_SiddharthWadke_RXv1.1.cpp

#include "mbed.h"
#include "nRF24L01P.h"
 
Serial pc(USBTX, USBRX); // tx, rx
 
nRF24L01P my_nrf24l01p(PTD2, PTD3, PTD1, PTD0, PTD5, PTD4);    // mosi, miso, sck, csn, ce, irq
 
//blue for pipe1 and green for pipe0
DigitalOut GreenLED(PTA12);
DigitalOut BlueLED(PTC8);
int timeout = 5000;
DigitalOut myled(PTA5);
DigitalOut tempAlert(PTE20);
DigitalOut mqAlert(PTA13);
DigitalOut mq4Alert(PTE21);
int pot1Val = 0;
int pot2Val = 0;
int x = 0;
AnalogIn   ain(A0);

int main() {
    pc.printf("Receiver connecting.\r\n");
    wait_ms(1000);
    pc.printf("Receiver connecting.\r\n");
    wait_ms(1000);
    
    char count1[1];
    //char count2[1];
    char RxDataCnt_PIPE0;
    char temp;
    
    //specifying address same as transmitter for pipe0 and pipe1
    long long RxAddress_PIPE0 = 0xC2C2C2C2C2;
    
    my_nrf24l01p.powerUp();
    my_nrf24l01p.setRfFrequency(2492);
    
    //set rx address with default address and for specified pipe
    my_nrf24l01p.setRxAddress(RxAddress_PIPE0, DEFAULT_NRF24L01P_ADDRESS_WIDTH, NRF24L01P_PIPE_P0);    

    // Display the (default) setup of the nRF24L01+ chip
    pc.printf( "Frequency    : %d MHz\r\n",  my_nrf24l01p.getRfFrequency() );
    pc.printf( "Output power : %d dBm\r\n",  my_nrf24l01p.getRfOutputPower() );
    pc.printf( "Data Rate    : %d kbps\r\n", my_nrf24l01p.getAirDataRate() );
    
    //display rx address for both pipes
    pc.printf( "RX Address: 0x%010llX\r\n", my_nrf24l01p.getRxAddress(NRF24L01P_PIPE_P0) );
    pc.printf("................................\r\n");
    pc.printf( "Receiver Connected\r\n" );
    pc.printf("................................\r\n");
    RxDataCnt_PIPE0 = 1;
    
    //set transfer size explicitly for both pipes
    my_nrf24l01p.setTransferSize(RxDataCnt_PIPE0, NRF24L01P_PIPE_P0);
    
    my_nrf24l01p.setReceiveMode();
    my_nrf24l01p.enable();
 
 
    while (1) {
        
        //check if data is available in pipe0
        if ( my_nrf24l01p.readable(NRF24L01P_PIPE_P0)) {
            
            pc.printf(".................Data Receiving...............\r\n");
            temp = my_nrf24l01p.read( NRF24L01P_PIPE_P0, count1, RxDataCnt_PIPE0 );
            pot1Val = count1[0];
            //x = pot1Val;
            if (x != pot1Val){
                //temp = my_nrf24l01p.read( NRF24L01P_PIPE_P0, count2, RxDataCnt_PIPE0 );
                //pc.printf("Bytes Received = %d\r\n",temp);
                //pot2Val = count2[0];
                //val2 = count[1]
                
                pc.printf("Data Received 1 = %d\r\n",count1[0]);
                //pc.printf("Data Received 2 =%d\r\n",count2[0]);
            //    pc.printf("Bytes Received = %d\r\n",temp);
                //wait_ms(20);
                //pc.printf("Received: %d bytes from PIPE0; Temperature=%d\r\n",temp, count[0]);
                GreenLED = !GreenLED;
                x = pot1Val;
                pc.printf("Value of X : %d \n\r",x);
            }

        }
        
        wait_ms(1200);
        //pc.printf("Received Value End : %d \n\r",pot1Val);
        if(pot1Val > 75 and pot1Val < 90) {
            tempAlert = 1;
            pc.printf("Temperature Alert to Arduino \n\r");
        } 
        else if(pot1Val > 100 and pot1Val < 180 ) {
            pc.printf("MQ135 Alert to Arduino - Carbon dioxide CO2 detected \n\r");
        } 
        else if(pot1Val > 180 and pot1Val < 250 ) {
            mqAlert = 1;
            pc.printf("MQ135 Alert to Arduino - Butane Propane Detected \n\r");
        } 
        else if(pot1Val == 14) {
            mq4Alert = 1;
            pc.printf("MQ4 Alert to Arduino - LPG detected \n\r");
        } 
        else {
            tempAlert = 0;
            mqAlert = 0;
            pc.printf("No Alert to Arduino\n\r");
        //pc.printf("Received Value End : %d \n\r",pot1Val);
        wait_ms(2500);
        tempAlert = 0;
        mqAlert = 0;
        mq4Alert = 0;
        }
    }
}
